trigger:
  branches: { include: [ main ] }
  paths:    { include: [ app/** ] }

name: ish-ci-$(Date:yyyyMMdd)$(Rev:.r)

# Variable group must define: ACR_NAME, ACR_LOGIN_SERVER, RESOURCE_GROUP, WEBAPP_NAME
variables:
- group: ish-dev

stages:
# --------------------------
# Preflight: validate vars
# --------------------------
- stage: Preflight
  displayName: Preflight Vars
  jobs:
  - job: check
    displayName: Validate required variables
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - bash: |
        set -euo pipefail
        echo "ACR_NAME=$(ACR_NAME)"
        echo "ACR_LOGIN_SERVER=$(ACR_LOGIN_SERVER)"
        echo "RESOURCE_GROUP=$(RESOURCE_GROUP)"
        echo "WEBAPP_NAME=$(WEBAPP_NAME)"
        : "${ACR_NAME?ACR_NAME is empty}"
        : "${ACR_LOGIN_SERVER?ACR_LOGIN_SERVER is empty}"
        : "${RESOURCE_GROUP?RESOURCE_GROUP is empty}"
        : "${WEBAPP_NAME?WEBAPP_NAME is empty}"
      displayName: Preflight vars

# --------------------------
# Build + Push to ACR
# --------------------------
- stage: Build_Push
  displayName: Build & Push to ACR
  dependsOn: Preflight
  jobs:
  - job: build
    displayName: Docker Build & Push
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - checkout: self

    - task: NodeTool@0
      inputs: { versionSpec: '18.x' }
      displayName: Use Node 18.x

    - bash: |
        set -eux
        cd app/api
        # Install production deps and build image
        npm install --omit=dev
        docker build -t $(ACR_LOGIN_SERVER)/ish-api:$(Build.BuildId) .
      displayName: Build container image

    - task: AzureCLI@2
      displayName: ACR Login & Push
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az acr login --name $(ACR_NAME)
          docker push $(ACR_LOGIN_SERVER)/ish-api:$(Build.BuildId)
          echo "##vso[task.setvariable variable=IMAGE_TAG;isOutput=true]$(Build.BuildId)"
      name: pushstep

# --------------------------
# Deploy to Staging Slot
# --------------------------
- stage: Deploy_Staging
  displayName: Deploy to Staging Slot
  dependsOn: Build_Push
  variables:
    IMAGE_TAG: $[ stageDependencies.Build_Push.build.outputs['pushstep.IMAGE_TAG'] ]
  jobs:
  - job: deploy_staging
    displayName: Deploy to staging
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: AzureCLI@2
      displayName: Ensure staging slot exists
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az webapp deployment slot create \
            -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) \
            --slot staging --configuration-source $(WEBAPP_NAME) || true

    # Hardened: assign MI to slot + grant AcrPull using --assignee-object-id
    - task: AzureCLI@2
      displayName: Ensure staging slot has Managed Identity + AcrPull
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "== Env ======="
          echo "SUBSCRIPTION: $(az account show --query id -o tsv || true)"
          echo "RG: $(RESOURCE_GROUP)"
          echo "APP: $(WEBAPP_NAME)"
          echo "ACR: $(ACR_NAME)"
          echo "=============="

          echo "[1/4] Assign (or confirm) system-assigned identity on the STAGING slot..."
          az webapp identity assign -g "$(RESOURCE_GROUP)" -n "$(WEBAPP_NAME)" --slot staging >/dev/null || true

          echo "[2/4] Read slot principalId..."
          SLOT_MI="$(az webapp identity show -g "$(RESOURCE_GROUP)" -n "$(WEBAPP_NAME)" --slot staging --query principalId -o tsv)"
          if [ -z "${SLOT_MI:-}" ]; then
            echo "ERROR: Could not retrieve staging slot principalId. Does the slot exist?" >&2
            az webapp deployment slot list -g "$(RESOURCE_GROUP)" -n "$(WEBAPP_NAME)" -o table || true
            exit 1
          fi
          echo "Staging slot principalId: ${SLOT_MI}"

          echo "[3/4] Get ACR resource ID..."
          ACR_ID="$(az acr show -n "$(ACR_NAME)" --query id -o tsv)"
          echo "ACR_ID: ${ACR_ID}"

          echo "[4/4] Grant AcrPull (ignore if RBAC lacks permission, but print a note)..."
          if az role assignment create --assignee-object-id "${SLOT_MI}" --role "AcrPull" --scope "${ACR_ID}" >/dev/null 2>&1; then
            echo "AcrPull granted to slot MI."
          else
            echo "WARNING: Could not grant AcrPull (likely insufficient RBAC for this service connection)."
            echo "If the next step fails to pull the image, run these once with an Owner/User Access Admin account:"
            echo "  az webapp identity assign -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging"
            echo "  SLOT_MI=\$(az webapp identity show -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging --query principalId -o tsv)"
            echo "  ACR_ID=\$(az acr show -n $(ACR_NAME) --query id -o tsv)"
            echo "  az role assignment create --assignee-object-id \$SLOT_MI --role AcrPull --scope \$ACR_ID"
          fi

          echo "Sleeping 15s to allow RBAC propagation..."
          sleep 15

          echo "Diagnostics (current role assignments for slot MI on ACR scope):"
          az role assignment list --assignee-object-id "${SLOT_MI}" --scope "${ACR_ID}" --query "[].{role:roleDefinitionName,scope:scope}" -o table || true

    - task: AzureCLI@2
      displayName: Point slot to new image
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az webapp config appsettings set -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging \
            --settings WEBSITES_PORT=8080
          az webapp config container set -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging \
            --docker-custom-image-name $(ACR_LOGIN_SERVER)/ish-api:$(IMAGE_TAG) \
            --docker-registry-server-url https://$(ACR_LOGIN_SERVER)
          az webapp restart -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging

    - bash: |
        set -eux
        # Warm up /healthz with retries
        for i in {1..10}; do
          curl -fsS https://$(WEBAPP_NAME)-staging.azurewebsites.net/healthz && exit 0
          sleep 6
        done
        echo "Health check failed" >&2
        exit 1
      displayName: Warm up /healthz

# --------------------------
# Manual approve (optional) + Swap to prod
# --------------------------
- stage: Approve_and_Swap
  displayName: Manual Approve then Swap
  dependsOn: Deploy_Staging
  jobs:
  - deployment: swap_to_prod
    displayName: Swap staging â†’ production
    environment: dev   # optional: configure an Environment 'dev' with approvers in DevOps UI
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: Swap staging -> production
            inputs:
              azureSubscription: 'svc-az-spn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -eux
                az webapp deployment slot swap \
                  -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) \
                  --slot staging --target-slot production

          - bash: |
              set -eux
              curl -fsS https://$(WEBAPP_NAME).azurewebsites.net/healthz
            displayName: Post-swap health
