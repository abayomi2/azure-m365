trigger:
  branches: { include: [ main ] }
  paths:    { include: [ app/** ] }

name: ish-ci-$(Date:yyyyMMdd)$(Rev:.r)

variables:
- group: ish-dev

stages:
- stage: Preflight
  displayName: Preflight Vars
  jobs:
  - job: check
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - bash: |
        set -euo pipefail
        echo "ACR_NAME=$(ACR_NAME)"
        echo "ACR_LOGIN_SERVER=$(ACR_LOGIN_SERVER)"
        echo "RESOURCE_GROUP=$(RESOURCE_GROUP)"
        echo "WEBAPP_NAME=$(WEBAPP_NAME)"
        : "${ACR_NAME?ACR_NAME is empty}"
        : "${ACR_LOGIN_SERVER?ACR_LOGIN_SERVER is empty}"
        : "${RESOURCE_GROUP?RESOURCE_GROUP is empty}"
        : "${WEBAPP_NAME?WEBAPP_NAME is empty}"
      displayName: Preflight vars

- stage: Build_Push
  displayName: Build & Push to ACR
  dependsOn: Preflight
  jobs:
  - job: build
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs: { versionSpec: '18.x' }
    - bash: |
        set -eux
        cd app/api
        npm install --omit=dev
        docker build -t $(ACR_LOGIN_SERVER)/ish-api:$(Build.BuildId) .
      displayName: Build image
    - task: AzureCLI@2
      displayName: ACR Login & Push
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az acr login --name $(ACR_NAME)
          docker push $(ACR_LOGIN_SERVER)/ish-api:$(Build.BuildId)
          echo "##vso[task.setvariable variable=IMAGE_TAG;isOutput=true]$(Build.BuildId)"
      name: pushstep

- stage: Deploy_Staging
  displayName: Deploy to Staging Slot
  dependsOn: Build_Push
  variables:
    IMAGE_TAG: $[ stageDependencies.Build_Push.build.outputs['pushstep.IMAGE_TAG'] ]
  jobs:
  - job: deploy_staging
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: AzureCLI@2
      displayName: Ensure staging slot exists
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az webapp deployment slot create -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging --configuration-source $(WEBAPP_NAME) || true

    - task: AzureCLI@2
      displayName: Ensure staging slot has Managed Identity + AcrPull
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az webapp identity assign -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging
          SLOT_MI=$(az webapp identity show -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging --query principalId -o tsv)
          echo "Staging slot principalId: $SLOT_MI"
          ACR_ID=$(az acr show -n $(ACR_NAME) --query id -o tsv)
          az role assignment create --assignee "$SLOT_MI" --role "AcrPull" --scope "$ACR_ID" || true
          sleep 15

    - task: AzureCLI@2
      displayName: Point slot to new image
      inputs:
        azureSubscription: 'svc-az-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -eux
          az webapp config appsettings set -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging \
            --settings WEBSITES_PORT=8080
          az webapp config container set -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging \
            --docker-custom-image-name $(ACR_LOGIN_SERVER)/ish-api:$(IMAGE_TAG) \
            --docker-registry-server-url https://$(ACR_LOGIN_SERVER)
          az webapp restart -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging

    - bash: |
        set -eux
        for i in {1..10}; do
          curl -fsS https://$(WEBAPP_NAME)-staging.azurewebsites.net/healthz && exit 0
          sleep 6
        done
        echo "Health check failed" >&2
        exit 1
      displayName: Warm up /healthz

- stage: Approve_and_Swap
  displayName: Manual Approve then Swap
  dependsOn: Deploy_Staging
  jobs:
  - deployment: swap_to_prod
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: Swap staging -> production
            inputs:
              azureSubscription: 'svc-az-spn'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -eux
                az webapp deployment slot swap -g $(RESOURCE_GROUP) -n $(WEBAPP_NAME) --slot staging --target-slot production
          - bash: |
              set -eux
              curl -fsS https://$(WEBAPP_NAME).azurewebsites.net/healthz
            displayName: Post-swap health
